#include <iostream>
#include <queue>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

// Structure to represent a node in the Huffman tree
struct HuffmanNode {
    char data; // Character stored in the node
    int frequency; // Frequency of the character
    HuffmanNode* left;
    HuffmanNode* right;

    HuffmanNode(char d, int f) : data(d), frequency(f), left(nullptr), right(nullptr) {}
};

// Comparator for the priority queue to prioritize nodes with lower frequency
struct CompareNodes {
    bool operator()(HuffmanNode* a, HuffmanNode* b) {
        return a->frequency > b->frequency;
    }
};

// Function to build the Huffman tree
HuffmanNode* buildHuffmanTree(const unordered_map<char, int>& freqMap) {
    // Create a priority queue to store nodes
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, CompareNodes> pq;

    // Create a leaf node for each character and add it to the priority queue
    for (const auto& entry : freqMap) {
        pq.push(new HuffmanNode(entry.first, entry.second));
    }

    // Build the Huffman tree
    while (pq.size() > 1) {
        // Extract the two nodes with the lowest frequency
        HuffmanNode* left = pq.top();
        pq.pop();
        HuffmanNode* right = pq.top();
        pq.pop();

        // Create a new internal node with these two nodes as children
        HuffmanNode* newNode = new HuffmanNode('\0', left->frequency + right->frequency);
        newNode->left = left;
        newNode->right = right;

        // Add the new node back to the priority queue
        pq.push(newNode);
    }

    // Return the root of the Huffman tree
    return pq.top();
}

// Function to generate Huffman codes for characters
void generateHuffmanCodes(HuffmanNode* root, string code, unordered_map<char, string>& huffmanCodes) {
    if (root == nullptr) return;

    // If the node is a leaf, store its character and code in the map
    if (root->data != '\0') {
        huffmanCodes[root->data] = code;
    }

    // Recursively generate codes for left and right subtrees
    generateHuffmanCodes(root->left, code + "0", huffmanCodes);
    generateHuffmanCodes(root->right, code + "1", huffmanCodes);
}

int main() {
    string text = "hello world";
    unordered_map<char, int> freqMap;

    // Count frequencies of characters in the text
    for (char c : text) {
        freqMap[c]++;
    }

    // Build the Huffman tree
    HuffmanNode* root = buildHuffmanTree(freqMap);

    // Generate Huffman codes
    unordered_map<char, string> huffmanCodes;
    generateHuffmanCodes(root, "", huffmanCodes);

    // Print Huffman codes
    cout << "Huffman Codes:\n";
    for (const auto& entry : huffmanCodes) {
        cout << entry.first << " : " << entry.second << endl;
    }

    // Cleanup: Delete allocated memory for Huffman tree nodes
    // Not essential for this simple example, but important in a real-world scenario
    return 0;
}
