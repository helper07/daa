#include <iostream>
#include <vector>

using namespace std;

const int N = 4; // Board size

// Function to print the board
void printBoard(const vector<vector<int>>& board) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

// Function to check if placing a queen at board[row][col] is safe
bool isSafe(const vector<vector<int>>& board, int row, int col) {
    // Check row
    for (int i = 0; i < col; ++i) {
        if (board[row][i] == 1) {
            return false;
        }
    }

    // Check upper diagonal
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    // Check lower diagonal
    for (int i = row, j = col; i < N && j >= 0; ++i, --j) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

// Function to solve the N Queens problem using backtracking
bool solveNQueens(vector<vector<int>>& board, int col) {
    // Base case: If all queens are placed
    if (col >= N) {
        return true;
    }

    // Try placing queen in each row of the current column
    for (int i = 0; i < N; ++i) {
        if (isSafe(board, i, col)) {
            // Place queen
            board[i][col] = 1;

            // Recur to place queens in subsequent columns
            if (solveNQueens(board, col + 1)) {
                return true;
            }

            // Backtrack
            board[i][col] = 0;
        }
    }

    // If queen can't be placed in any row of the current column
    return false;
}

int main() {
    vector<vector<int>> board(N, vector<int>(N, 0)); // Initialize board with zeros

    if (solveNQueens(board, 0)) {
        cout << "Solution found:\n";
        printBoard(board);
    } else {
        cout << "No solution exists!" << endl;
    }

    return 0;
}
