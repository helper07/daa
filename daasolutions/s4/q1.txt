#include <iostream>
#include <vector>
#include <ctime>

using namespace std;

// Merge two subarrays of arr[]
void merge(vector<int>& arr, int left, int middle, int right) {
    int n1 = middle - left + 1;
    int n2 = right - middle;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[middle + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Merge sort function
void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int middle = left + (right - left) / 2;

        mergeSort(arr, left, middle);
        mergeSort(arr, middle + 1, right);

        merge(arr, left, middle, right);
    }
}

int main() {
    // Seed for random number generation
    srand(time(0));

    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> numbers(n);

    // Generate random numbers
    for (int i = 0; i < n; i++) {
        numbers[i] = rand() % 1000;
    }

    cout << "Original list: ";
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;

    // Measure the time taken for sorting
    clock_t startTime = clock();
    mergeSort(numbers, 0, n - 1);
    clock_t endTime = clock();

    cout << "Sorted list: ";
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;

    double timeTaken = double(endTime - startTime) / CLOCKS_PER_SEC;
    cout << "Time taken to sort: " << timeTaken << " seconds" << endl;

    return 0;
}
