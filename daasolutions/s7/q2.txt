#include <iostream>
#include <vector>
#include <stack>
#include <unordered_set>

using namespace std;

class Graph {
    int V;
    vector<vector<int>> adjList;

public:
    Graph(int vertices) : V(vertices) {
        adjList.resize(V);
    }

    void addEdge(int source, int destination) {
        adjList[source].push_back(destination);
    }

    void topologicalSortUtil(int v, vector<bool>& visited, stack<int>& s) {
        visited[v] = true;

        for (int u : adjList[v]) {
            if (!visited[u]) {
                topologicalSortUtil(u, visited, s);
            }
        }

        s.push(v);
    }

    vector<int> topologicalSort() {
        vector<bool> visited(V, false);
        stack<int> s;

        for (int i = 0; i < V; ++i) {
            if (!visited[i]) {
                topologicalSortUtil(i, visited, s);
            }
        }

        vector<int> result;
        while (!s.empty()) {
            result.push_back(s.top());
            s.pop();
        }

        return result;
    }
};

int main() {
    int V, E;
    cout << "Enter the number of vertices and edges: ";
    cin >> V >> E;

    Graph graph(V);

    cout << "Enter the source and destination of each edge:" << endl;
    for (int i = 0; i < E; ++i) {
        int source, destination;
        cin >> source >> destination;
        graph.addEdge(source, destination);
    }

    vector<int> topologicalOrder = graph.topologicalSort();

    cout << "Topological sorting of the graph:" << endl;
    for (int vertex : topologicalOrder) {
        cout << vertex << " ";
    }
    cout << endl;

    return 0;
}
