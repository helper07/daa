#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int longestCommonSubsequenceLength(const string& text1, const string& text2) {
    int m = text1.length();
    int n = text2.length();

    // Create a 2D array to store the lengths of LCS
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    // Fill the dp array using dynamic programming
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (text1[i - 1] == text2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    // Return the length of LCS
    return dp[m][n];
}

int main() {
    string text1, text2;
    cout << "Enter the first string: ";
    cin >> text1;
    cout << "Enter the second string: ";
    cin >> text2;

    int length = longestCommonSubsequenceLength(text1, text2);
    cout << "Length of Longest Common Subsequence: " << length << endl;

    return 0;
}
